{"name": "test_positive_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=130.0.6723.117)\nStacktrace:\n\tGetHandleVerifier [0x00007FF69BA138A5+3004357]\n\t(No symbol) [0x00007FF69B6A9970]\n\t(No symbol) [0x00007FF69B55582A]\n\t(No symbol) [0x00007FF69B52FA75]\n\t(No symbol) [0x00007FF69B5D2C77]\n\t(No symbol) [0x00007FF69B5EB351]\n\t(No symbol) [0x00007FF69B5CB983]\n\t(No symbol) [0x00007FF69B597628]\n\t(No symbol) [0x00007FF69B598791]\n\tGetHandleVerifier [0x00007FF69BA3A00D+3161901]\n\tGetHandleVerifier [0x00007FF69BA8E060+3506048]\n\tGetHandleVerifier [0x00007FF69BA8400D+3465005]\n\tGetHandleVerifier [0x00007FF69B800EEB+830987]\n\t(No symbol) [0x00007FF69B6B467F]\n\t(No symbol) [0x00007FF69B6B09D4]\n\t(No symbol) [0x00007FF69B6B0B6D]\n\t(No symbol) [0x00007FF69B6A0149]\n\tBaseThreadInitThunk [0x00007FFAFC553034+20]\n\tRtlUserThreadStart [0x00007FFAFE451551+33]", "trace": "def test_positive_login():\n        \"\"\"\n        Test case POC-1\n        \"\"\"\n        # Описываем опции запуска браузера\n        chrome_options = Options()\n        chrome_options.add_argument(\"start-maximized\") # открываем на полный экран\n        chrome_options.add_argument(\"--disable-infobars\") # отключаем инфо сообщения\n        chrome_options.add_argument(\"--disable-extensions\") # отключаем расширения\n        chrome_options.add_argument(\"--disable-search-engine-choice-screen\") # отключаем выбор движка для поиска\n        # chrome_options.add_argument(\"--headless\") # спец. режим \"без браузера\"\n    \n        # устанавливаем webdriver в соответствии с версией используемого браузера\n        service = Service()\n    \n        # запускаем браузер с указанными выше настройками\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n    \n        # определяем адрес страницы для теста и переходим на неё\n        url = 'https://pokemonbattle-stage.ru/'\n        driver.get(url=url)\n    \n        # ищем по селектору инпут \"Email\", кликаем по нему и вводим значение email\n>       email = WebDriverWait(driver, timeout=10, poll_frequency=2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '[class*=\"f_email\"]')))\n\ntests\\web\\test_web.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AF0FE32E40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF69B6A0149]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAFC553034+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAFE451551+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=130.0.6723.117)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF69BA138A5+3004357]\nE       \t(No symbol) [0x00007FF69B6A9970]\nE       \t(No symbol) [0x00007FF69B55582A]\nE       \t(No symbol) [0x00007FF69B52FA75]\nE       \t(No symbol) [0x00007FF69B5D2C77]\nE       \t(No symbol) [0x00007FF69B5EB351]\nE       \t(No symbol) [0x00007FF69B5CB983]\nE       \t(No symbol) [0x00007FF69B597628]\nE       \t(No symbol) [0x00007FF69B598791]\nE       \tGetHandleVerifier [0x00007FF69BA3A00D+3161901]\nE       \tGetHandleVerifier [0x00007FF69BA8E060+3506048]\nE       \tGetHandleVerifier [0x00007FF69BA8400D+3465005]\nE       \tGetHandleVerifier [0x00007FF69B800EEB+830987]\nE       \t(No symbol) [0x00007FF69B6B467F]\nE       \t(No symbol) [0x00007FF69B6B09D4]\nE       \t(No symbol) [0x00007FF69B6B0B6D]\nE       \t(No symbol) [0x00007FF69B6A0149]\nE       \tBaseThreadInitThunk [0x00007FFAFC553034+20]\nE       \tRtlUserThreadStart [0x00007FFAFE451551+33]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "description": "\nTest case POC-1\n", "start": 1736926282842, "stop": 1736926392641, "uuid": "eaf82ab3-f987-4b3a-98be-2a81523128b7", "historyId": "a19bf9a6e099961bd9608825bbb6a5a6", "testCaseId": "a19bf9a6e099961bd9608825bbb6a5a6", "fullName": "tests.web.test_web#test_positive_login", "labels": [{"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "test_web"}, {"name": "host", "value": "WIN-65FQ8MDONTD"}, {"name": "thread", "value": "9236-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.test_web"}]}